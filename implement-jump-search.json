{
  "slug": "implement-jump-search",
  "title": "Implement Jump Search",
  "c": "#include <stdio.h>\n#include <math.h>\n\nint jumpSearch(int arr[], int n, int x) {\n    int blockSize = sqrt(n);\n    int prev = 0;\n\n    while (arr[(int)(fmin(blockSize, n) -1 )] < x) {\n        prev = blockSize;\n        blockSize += sqrt(n);\n        if (prev >= n)\n            return -1; \n    }\n\n    while (arr[prev] < x) {\n        prev++;\n\n        if (prev == fmin(blockSize, n))\n            return -1; \n    }\n\n    if (arr[prev] == x)\n        return prev; \n\n    return -1; \n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int x = 5;\n    int result = jumpSearch(arr, n, x);\n\n    if (result != -1)\n        printf(\"Output: %d\\n\", result);\n    else\n        printf(\"Value not found in the list\\n\");\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <vector>\n#include <cmath>\n\n// Jump Search function\nint jumpSearch(std::vector<int>& arr, int target) {\n    int n = arr.size();\n    int step = sqrt(n); // Jump step size\n\n    int prev = 0;\n    while (arr[std::min(step, n) - 1] < target) {\n        prev = step;\n        step += sqrt(n);\n        if (prev >= n)\n            return -1; // Element not found\n    }\n\n    while (arr[prev] < target) {\n        prev++;\n        if (prev == std::min(step, n))\n            return -1; // Element not found\n    }\n\n    if (arr[prev] == target)\n        return prev;\n\n    return -1; // Element not found\n}\n\nint main() {\n    std::vector<int> arr;\n    int n, target;\n\n    std::cout << \"Enter the number of elements in the array: \";\n    std::cin >> n;\n\n    std::cout << \"Enter \" << n << \" sorted elements:\" << std::endl;\n    for (int i = 0; i < n; i++) {\n        int num;\n        std::cin >> num;\n        arr.push_back(num);\n    }\n\n    std::cout << \"Enter the element you want to search for: \";\n    std::cin >> target;\n\n    int index = jumpSearch(arr, target);\n\n    if (index != -1) {\n        std::cout << \"Element \" << target << \" found at index \" << index << std::endl;\n    } else {\n        std::cout << \"Element \" << target << \" not found in the array.\" << std::endl;\n    }\n\n    return 0;\n}\n",
  "c-sharp": "using System;\n\nclass JumpSearch\n{\n    public static int JumpSearchFunction(int[] arr, int target)\n    {\n        int n = arr.Length;\n        int step = (int)Math.Floor(Math.Sqrt(n));\n        int prev = 0;\n\n        while (arr[Math.Min(step, n) - 1] < target)\n        {\n            prev = step;\n            step += (int)Math.Floor(Math.Sqrt(n));\n            if (prev >= n)\n                return -1;\n        }\n\n        while (arr[prev] < target)\n        {\n            prev++;\n\n            if (prev == Math.Min(step, n))\n                return -1;\n        }\n\n        if (arr[prev] == target)\n            return prev;\n\n        return -1;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter the number of elements in the array:\");\n        int n = int.Parse(Console.ReadLine());\n        int[] arr = new int[n];\n\n        Console.WriteLine(\"Enter the elements of the array in sorted order and enter to input next number:\");\n        for (int i = 0; i < n; i++)\n        {\n            arr[i] = int.Parse(Console.ReadLine());\n        }\n\n        Console.WriteLine(\"Enter the element to search:\");\n        int target = int.Parse(Console.ReadLine());\n\n        int result = JumpSearchFunction(arr, target);\n\n        if (result == -1)\n        {\n            Console.WriteLine(\"Element not found in the array.\");\n        }\n        else\n        {\n            Console.WriteLine($\"Element found at index {result}.\");\n        }\n    }\n}\n",
  "java": "import java.util.*;\n\npublic class ImplementJumpSearch {\n\n    public static int implementJumpSearch(int[] arr, int x ){\n\n        //calculating the block size to be jumped\n        double blockSize = Math.floor(Math.sqrt(arr.length));\n        int prev = 0;\n\n        // Finding the block where element could be present\n        while (arr[(int) (Math.min(blockSize, arr.length) - 1)] < x) {\n            prev = (int)blockSize;\n            blockSize += Math.floor(Math.sqrt(arr.length));\n\n            if (prev >= arr.length) {\n                return -1; // Element Not present\n            }\n        }\n\n        // Linear search within the block\n        while (arr[prev] < x) {\n            prev++;\n\n            if (prev ==Math.min(blockSize, arr.length)) {\n                return -1; // Element Not present\n            }\n        }\n\n        // If the element is present\n        if (arr[prev] == x) {\n            return prev;\n        }\n\n        return -1;\n    }\n\n\n    public static void main(String[] args){\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the size of the array:\");\n        int size = scanner.nextInt();\n\n        int[] inputArray = new int[size];\n\n        System.out.println(\"Enter the elements of the array:\");\n        for(int i=0;i<size;i++){\n            inputArray[i] = scanner.nextInt();\n        }\n\n        Arrays.sort(inputArray);\n\n        System.out.println(\"Enter the value to search:\");\n\n        int searchValue = scanner.nextInt();\n\n        int result = ImplementJumpSearch.implementJumpSearch(inputArray,searchValue);\n        if(result==-1){\n            System.out.println(\"value not present\");\n        }\n        else{\n            System.out.println(\"Element found at index: \"+result);\n        }\n        scanner.close();\n\n    }\n}\n",
  "javascript": "function jumpSearch(arr, a) {\n    const n = arr.length;\n    let blockSize = Math.floor(Math.sqrt(n));\n    let prev = 0;\n\n    while (arr[Math.min(blockSize, n) - 1] < a) {\n        prev = blockSize;\n        blockSize += Math.floor(Math.sqrt(n));\n\n        if (prev >= n) {\n            return -1; \n        }\n    }\n\n    while (arr[prev] < a) {\n        prev++;\n        if (prev === Math.min(blockSize, n)) {\n            return -1;\n        }\n    }\n\n    if (arr[prev] === a) {\n        return prev;\n    }\n\n    return -1;\n}\n\nconst input = [1, 2, 3, 4, 5];\nconst search = 4;\nconst res = jumpSearch(input, search);\n\nif (res !== -1) {\n    console.log(`Element ${search} found at index ${res}`);\n} else {\n    console.log(`Element ${search} not found`);\n}\n",
  "typescript": "function jumpSearch(arr: number[], x: number): number {\n    const n = arr.length;\n    let blockSize = Math.floor(Math.sqrt(n));\n    let prev = 0;\n\n    // Jumping to the right block\n    while (arr[Math.min(blockSize, n) - 1] < x) {\n        prev = blockSize;\n        blockSize += Math.floor(Math.sqrt(n));\n\n        if (prev >= n) {\n            return -1; // Not found\n        }\n    }\n\n    // Linear search within the block\n    while (arr[prev] < x) {\n        prev++;\n\n        if (prev === Math.min(blockSize, n)) {\n            return -1; // Not found\n        }\n    }\n\n    // If the element is found\n    if (arr[prev] === x) {\n        return prev;\n    }\n\n    return -1; // Not found\n}\n\n// Example usage\nconst exampleInput = [1, 2, 3, 4, 5];\nconst valueToSearch = 4;\nconst res = jumpSearch(exampleInput, valueToSearch);\n\nif (res !== -1) {\n    console.log(`Element ${valueToSearch} found at index ${res}`);\n} else {\n    console.log(`Element ${valueToSearch} not found`);\n}\n",
  "description": "\n## Write a program to implement jump search\n\nLike Binary Search, Jump Search is a searching algorithm for sorted arrays. The basic idea is to check fewer elements (than linear search) by jumping ahead by fixed steps or skipping some elements in place of searching all elements.\r\n\r\nFor example, suppose we have an array arr[] of size n and block (to be jumped) size m. Then we search at the indexes arr[0], arr[m], arr[2m]…..arr[km] and so on. Once we find the interval (arr[km] < x < arr[(k+1)m]), we perform a linear search operation from the index km to find the element x.\r\n\r\n### Pseudocode\r\n\r\n```text\r\nprocedure jump_search\r\n   A ← sorted array\r\n   n ← size of array\r\n   x ← value to be searched\r\n\r\n   Set block size = √n\r\n\r\n   while A[min(block size, n)-1] < x do\r\n      prev = block size\r\n      block size = block size + √n\r\n      if prev >= n\r\n         return not found\r\n         \r\n   end while\r\n   \r\n   while A[prev] < x do\r\n      prev = prev + 1\r\n      \r\n      if prev == min(block size, n)\r\n         return not found\r\n         \r\n   end while\r\n   \r\n   if A[prev] == x\r\n      return prev\r\n      \r\n   return not found\r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nlist = [1,2,3,4,5]\r\nvalue = 4\r\n\r\nOutput : 3\r\n```\n\n---\n",
  "trackId": 5253,
  "lastUpdated": "2024-01-21T13:21:17Z",
  "contributors": [
    "chintanrupareliya",
    "PunugupatiSaikumar",
    "srivamsidandu",
    "anandfresh",
    "anurag1807-atom",
    "av-techspot",
    "Shivamk034",
    "harshraj8843"
  ],
  "python": "import math\n\n\ndef jump_search(arr, x, n):\n    block_size = math.sqrt(n)\n\n    while arr[int(min(block_size, n) - 1)] < x:\n        prev = block_size\n        block_size += math.sqrt(n)\n        if prev >= n:\n            return -1\n\n    while arr[int(prev)] < x:\n        prev += 1\n\n        if prev == min(block_size, n):\n            return -1\n\n    if arr[int(prev)] == x:\n        return int(prev)\n\n    return -1\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    value = 4\n    n = len(list)\n    print(jump_search(list, value, n))\n",
  "php": "<?php\nfunction jumpSearch($arr, $x) {\n    $n = count($arr);\n    $blockSize = (int) sqrt($n);\n    $prev = 0;\n\n    while ($arr[min($blockSize, $n) - 1] < $x) {\n        $prev = $blockSize;\n        $blockSize += (int) sqrt($n);\n        if ($prev >= $n) {\n            return -1; // Element not found\n        }\n    }\n\n    while ($arr[$prev] < $x) {\n        $prev++;\n        if ($prev == min($blockSize, $n)) {\n            return -1;\n        }\n    }\n\n    if ($arr[$prev] == $x) {\n        return $prev;\n    }\n\n    return -1;\n}\n\necho \"Enter array elements separated by space: \";\n$input = trim(fgets(STDIN));\n$inputArray = explode(\" \", $input);\n$inputArray = array_map('intval', $inputArray);\n\necho \"Enter the value to search for: \";\n$searchValue = intval(trim(fgets(STDIN)));\n\n$result = jumpSearch($inputArray, $searchValue);\n\nif ($result == -1) {\n    echo \"Element not found in the array\\n\";\n} else {\n    echo \"Element found at index \" . $result . \"\\n\";\n}\n?>\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "typescript",
    "python",
    "php"
  ]
}